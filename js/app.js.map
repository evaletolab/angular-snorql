{"version":3,"sources":["app/js/app.config.js","app/js/app.directives.js","app/js/app.factory.js","app/js/app.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACtCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;CCzvfile":"build/js/app.js","sourcesContent":["'use strict';\n//Define the application global configuration\nangular.module('snorql.config', []).factory('config', [\n    function () {\n\n         var namespacePrefixes={\n            owl:'http://www.w3.org/2002/07/owl#',\n            xsd:'http://www.w3.org/2001/XMLSchema#',\n            rdfs: 'http://www.w3.org/2000/01/rdf-schema#',\n            rdf: 'http://www.w3.org/1999/02/22-rdf-syntax-ns#',\n            foaf: 'http://xmlns.com/foaf/0.1/',\n            geo:'http://www.w3.org/2003/01/geo/wgs84_pos#',\n            dc: 'http://purl.org/dc/elements/1.1/',\n            '': 'http://dbpedia.org/resource/',\n            dbpedia2: 'http://dbpedia.org/property/',\n            dbpedia: 'http://dbpedia.org/',\n            skos: 'http://www.w3.org/2004/02/skos/core#',\n            category: 'http://dbpedia.org/resource/Category:',\n            dcterms: 'http://purl.org/dc/terms/',\n            ontology: 'http://dbpedia.org/ontology/',\n            virtuoso:'http://www.openlinksw.com/virtrdf-data-formats'\n        };\n\n\n        // global application configuration\n        var defaultConfig = {\n            home:'https://github.com/evaletolab/angular-snorql',\n            sparql : {\n              endpoint: 'http://dbpedia.org/sparql',\n              examples: 'queries.json',\n              prefixes: namespacePrefixes\n          }\n        }\n\n\n        return defaultConfig;\n    }\n]);\n","\n/*\n * create snorql directives\n */\n\nangular.module('snorql.ui',[]) \n\n.directive(\"menuToggle\",[function() {\n\n    function link(scope, element, attrs) {\n      element.click(function () {\n        $('.row-offcanvas').toggleClass('active')\n        //$('html').toggleClass('overvlow-hidden')\n      });\n    }\n    \n    return {\n      link: link\n    };    \n}])\n\n.directive(\"sparqlFormatter\",['snorql',function(snorql) {\n    var formatter;\n    function link(scope, element, attrs) {\n      scope.$watch('sparqlFormatter', function(newValue, oldValue) {\n        if (newValue){\n          formatter= snorql.SPARQLResultFormatter()\n          element.html(formatter.toDOM())\n        }\n      });\n    }\n    \n    return {\n        restrict: 'A',\n        scope: {\n            sparqlFormatter: '='\n        },      \n        link: link\n    };    \n}])\n\n","\n/*\n * create snorql service\n */\n\nangular.module('snorql.service',[])\n\n.factory('snorql', [\"$http\", \"$q\", \"$timeout\", \"$location\", \"config\",function($http, $q, $timeout, $location, config) {\n\n  var defaultSnorql={\n    property:'SELECT DISTINCT ?resource ?value\\n' +\n                  'WHERE { ?resource <URI_COMPONENT> ?value }\\n' +\n                  'ORDER BY ?resource ?value',\n\n    clazz :  'SELECT DISTINCT ?instance\\n' +\n                  'WHERE { ?instance a <URI_COMPONENT> }\\n' +\n                  'ORDER BY ?instance',\n\n    describe:'SELECT DISTINCT ?property ?hasValue ?isValueOf\\n' +\n                  'WHERE {\\n' +\n                  '  { <URI_COMPONENT> ?property ?hasValue }\\n' +\n                  '  UNION\\n' +\n                  '  { ?isValueOf ?property <URI_COMPONENT> }\\n' +\n                  '}\\n' +\n                  'ORDER BY (!BOUND(?hasValue)) ?property ?hasValue ?isValueOf',\n\n    query:   'SELECT DISTINCT * WHERE {\\n  ?s ?p ?o\\n}\\nLIMIT 10',\n\n    // set your endpoint here\n    sparqlEndpoint:config.sparql.endpoint,\n    sparqlUrlExamples:config.sparql.examples\n  };\n\n\n  var defaultSparqlParams={\n    'default-graph-uri':null,\n    'named-graph-uri':null,\n     output:'json',\n  };\n\n  var defaultAcceptHeaders={\n    html:'application/sparql-results+json,*/*',\n    json:'application/sparql-results+json,*/*',\n    xml:'application/sparql-results+xml,*/*',\n    csv:'application/sparql-results+csv,*/*'\n  };\n\n  //\n  // serialize prefixes\n  var query_getPrefixes = function() {\n    var prefixes = '';\n    for (var prefix in config.sparql.prefixes) {\n        var uri = config.sparql.prefixes[prefix];\n        prefixes = prefixes + 'PREFIX ' + prefix + ': <' + uri + '>\\n';\n    }\n    return prefixes;\n  };\n\n\n  var Snorql=function(){\n    //\n    // this service depend on two $resources (eg. dao in Java world)\n    // this.$dao={queries:$resource('queries.json'), sparqlQuery:$resource('sparql.json')};\n\n\n    // queries examples\n    this.examples=[];\n    // examples tags\n    this.tags=[]\n\n    // initial sparql result\n    this.result={head:[],results:[]};\n\n    // initial sparql query\n    this.query=defaultSnorql.query;\n\n    // initial url for examples\n    this.examplesUrl=defaultSnorql.sparqlUrlExamples;\n\n    //\n    // wrap promise to this object\n    this.$promise=$q.when(this);\n\n    //\n    // manage cancel\n    this.canceler = $q.defer();\n  };\n\n  Snorql.prototype.reset=function(){\n    this.canceler.resolve()\n    this.result={head:[],results:[]};\n    this.canceler = $q.defer();\n  };\n\n  Snorql.prototype.endpoint=function(){\n    return defaultSnorql.sparqlEndpoint;\n  };\n\n  //\n  // load sparql examples\n  Snorql.prototype.loadExamples=function(){\n   var self=this;\n   if(this.examples.length){\n     return this;\n   }\n   this.$promise=this.$promise.then(function(){\n       return $http({method:'GET',url:self.examplesUrl});\n   });\n\n   this.$promise.then(function(config){\n      var index=0, rawtags=[];\n      self.examples=(config.data);\n      self.examples.forEach(function(example){\n        example.index=index++;\n        if(!example.tags)\n          return\n        //\n        // considering multiple tags\n        example.tags.split(',').forEach(function(tag){\n          if(self.tags.indexOf(tag.trim())==-1){\n            self.tags.push(tag)\n          }\n        })\n      })\n   });\n\n   return this;\n  };\n\n  // manage default snorql state\n  Snorql.prototype.updateQuery=function(params){\n    if(params.class){\n      this.query=defaultSnorql['class'].replace(/URI_COMPONENT/g,params.class);\n    }else\n    if(params.property){\n      this.query=defaultSnorql['property'].replace(/URI_COMPONENT/g,params.property);\n    }else\n    if(params.describe){\n      this.query=defaultSnorql['describe'].replace(/URI_COMPONENT/g,params.describe);\n    }else{\n      this.query=params.query||defaultSnorql.query;\n    }\n    return this.query\n  }\n\n\n  //\n  // start a sparql query,\n  //  http filter define : query* (default), describe, class, property and output=json* (default)\n  Snorql.prototype.executeQuery=function(sparql,filter){\n   var self=this;\n   if (!sparql||sparql==='')\n      return self;\n\n   this.reset();\n   var params=angular.extend(defaultSparqlParams,filter, {query:sparql});\n\n   // setup prefixes\n   params.query=query_getPrefixes()+'\\n'+params.query\n\n   var accept={'Accept':defaultAcceptHeaders[params.output]};\n\n   var url=defaultSnorql.sparqlEndpoint;\n\n\n   if(params.output!=='html'){\n     self.reset();\n     var deferred = $q.defer();\n     window.location =url+'?'+$.param(params);\n     this.$promise=deferred.promise;\n     $timeout(function(){\n       deferred.resolve(this);\n     },200)\n     return self;\n   }\n\n   //\n   // html output is done by parsing json\n   params.output='json'\n   this.$promise=$http({method:'GET', url:url,params:params,headers:accept, timeout: this.canceler.promise});\n   console.log(this.$promise)\n   this.$promise.then(function(config){\n      self.result=(config.data);\n      console.log(self.result);\n   })\n   return this;\n  }\n\n  // access the singleton\n  Snorql.prototype.prefixes=function(){\n    return config.sparql.prefixes;\n  }\n\n  /**\n   * SPARQLResultFormatter: Renders a SPARQL/JSON result set into an HTML table.\n   */\n  Snorql.prototype.SPARQLResultFormatter=function() {\n      return new (function(result, namespaces){\n        this._json = result;\n        this._variables = this._json.head['vars']||{};\n        this._results = this._json.results['bindings']||[];\n        this._namespaces = namespaces;\n\n        this.toDOM = function() {\n            var table = document.createElement('table');\n            table.className = 'queryresults';\n            table.appendChild(this._createTableHeader());\n            for (var i = 0; i < this._results.length; i++) {\n                table.appendChild(this._createTableRow(this._results[i], i));\n            }\n            return table;\n        }\n\n        // TODO: Refactor; non-standard link makers should be passed into the class by the caller\n        this._getLinkMaker = function(varName) {\n            if (varName == 'property') {\n                return function(uri) { return '?property=' + encodeURIComponent(uri); };\n            } else if (varName == 'class') {\n                return function(uri) { return '?class=' + encodeURIComponent(uri); };\n            } else {\n                return function(uri) { return '?describe=' + encodeURIComponent(uri); };\n            }\n        }\n\n        this._createTableHeader = function() {\n            var tr = document.createElement('tr');\n            var hasNamedGraph = false;\n            for (var i = 0; i < this._variables.length; i++) {\n                var th = document.createElement('th');\n                th.appendChild(document.createTextNode(this._variables[i]));\n                tr.appendChild(th);\n                if (this._variables[i] == 'namedgraph') {\n                    hasNamedGraph = true;\n                }\n            }\n            if (hasNamedGraph) {\n                var th = document.createElement('th');\n                th.appendChild(document.createTextNode(' '));\n                tr.insertBefore(th, tr.firstChild);\n            }\n            return tr;\n        }\n\n        this._createTableRow = function(binding, rowNumber) {\n            var tr = document.createElement('tr');\n            if (rowNumber % 2) {\n                tr.className = 'odd';\n            } else {\n                tr.className = 'even';\n            }\n            var namedGraph = null;\n            for (var i = 0; i < this._variables.length; i++) {\n                var varName = this._variables[i];\n                td = document.createElement('td');\n                td.appendChild(this._formatNode(binding[varName], varName));\n                tr.appendChild(td);\n                if (this._variables[i] == 'namedgraph') {\n                    namedGraph = binding[varName];\n                }\n            }\n            if (namedGraph) {\n                var link = document.createElement('a');\n                link.href = 'javascript:snorql.switchToGraph(\\'' + namedGraph.value + '\\')';\n                link.appendChild(document.createTextNode('Switch'));\n                var td = document.createElement('td');\n                td.appendChild(link);\n                tr.insertBefore(td, tr.firstChild);\n            }\n            return tr;\n        }\n\n        this._formatNode = function(node, varName) {\n            if (!node) {\n                return this._formatUnbound(node, varName);\n            }\n            if (node.type == 'uri') {\n                return this._formatURI(node, varName);\n            }\n            if (node.type == 'bnode') {\n                return this._formatBlankNode(node, varName);\n            }\n            if (node.type == 'literal') {\n                return this._formatPlainLiteral(node, varName);\n            }\n            if (node.type == 'typed-literal') {\n                return this._formatTypedLiteral(node, varName);\n            }\n            return document.createTextNode('???');\n        }\n\n        this._formatURI = function(node, varName) {\n            var span = document.createElement('span');\n            span.className = 'uri';\n            var a = document.createElement('a');\n            a.href = this._getLinkMaker(varName)(node.value);\n            a.title = '<' + node.value + '>';\n            a.className = 'graph-link';\n            var qname = this._toQName(node.value);\n            if (qname) {\n                a.appendChild(document.createTextNode(qname));\n                span.appendChild(a);\n            } else {\n              // embed image object\n                match = node.value.match(/\\.(png|gif|jpg)(\\?.+)?$/);\n                if (match) {\n                    img = document.createElement('img');\n                    img.src =node.value;\n                    img.title = node.value;\n                    img.className = 'media';\n\n                    a.appendChild(img);\n                    span.appendChild(a);\n                }else{\n                  a.appendChild(document.createTextNode(node.value));\n                  span.appendChild(document.createTextNode('<'));\n                  span.appendChild(a);\n                  span.appendChild(document.createTextNode('>'));\n\n                }\n\n            }\n            var match = node.value.match(/^(https?|ftp|mailto|irc|gopher|news):/);\n            if (match) {\n                span.appendChild(document.createTextNode(' '));\n                var externalLink = document.createElement('a');\n                externalLink.href = node.value;\n                var img = document.createElement('img');\n                img.src = 'img/link.png';\n                img.alt = '[' + match[1] + ']';\n                img.title = 'Go to Web page';\n                externalLink.appendChild(img);\n                span.appendChild(externalLink);\n            }\n\n\n\n            return span;\n        }\n\n        this._formatPlainLiteral = function(node, varName) {\n            var text = '\"' + node.value + '\"';\n            if (node['xml:lang']) {\n                text += '@' + node['xml:lang'];\n            }\n            return document.createTextNode(text);\n        }\n\n        this._formatTypedLiteral = function(node, varName) {\n            var text = '\"' + node.value + '\"';\n            if (node.datatype) {\n                text += '^^' + this._toQNameOrURI(node.datatype);\n            }\n            if (this._isNumericXSDType(node.datatype)) {\n                var span = document.createElement('span');\n                span.title = text;\n                span.appendChild(document.createTextNode(node.value));\n                return span;\n            }\n            return document.createTextNode(text);\n        }\n\n        this._formatBlankNode = function(node, varName) {\n            return document.createTextNode('_:' + node.value);\n        }\n\n        this._formatUnbound = function(node, varName) {\n            var span = document.createElement('span');\n            span.className = 'unbound';\n            span.title = 'Unbound'\n            span.appendChild(document.createTextNode('-'));\n            return span;\n        }\n\n        this._toQName = function(uri) {\n            for (var prefix in this._namespaces) {\n                var nsURI = this._namespaces[prefix];\n                if (uri.indexOf(nsURI) == 0) {\n                    return prefix + ':' + uri.substring(nsURI.length);\n                }\n            }\n            return null;\n        }\n\n        this._toQNameOrURI = function(uri) {\n            var qName = this._toQName(uri);\n            return (qName == null) ? '<' + uri + '>' : qName;\n        }\n\n        this._isNumericXSDType = function(datatypeURI) {\n            for (var i = 0; i < this._numericXSDTypes.length; i++) {\n                if (datatypeURI == this._xsdNamespace + this._numericXSDTypes[i]) {\n                    return true;\n                }\n            }\n            return false;\n        }\n        this._xsdNamespace = 'http://www.w3.org/2001/XMLSchema#';\n        this._numericXSDTypes = ['long', 'decimal', 'float', 'double', 'int',\n            'short', 'byte', 'integer', 'nonPositiveInteger', 'negativeInteger',\n            'nonNegativeInteger', 'positiveInteger', 'unsignedLong',\n            'unsignedInt', 'unsignedShort', 'unsignedByte'];\n      })(this.result, this.prefixes())\n  }\n\n\n  return new Snorql()\n}]);\n","'use strict';\n\n/**\n * create application snorql and load deps\n */\nvar app = angular.module('snorql', [\n  'ngRoute', 'ui.codemirror', 'snorql.config', 'snorql.service','snorql.ui'\n]);\n\napp.controller('SnorqlCtrl', ['$scope','$timeout','$location','snorql','config', function($scope, $timeout, $location, snorql, config) {\n  //\n  // go home link\n  $scope.home=config.home;\n\n  //\n  // snorql service provide examples, examples tags, config and executeQuery\n  $scope.snorql=snorql;\n\n  //\n  // setup default output\n  $scope.outputs=['html','json','csv','xml'];\n  $scope.output='html';\n\n  //\n  // default message\n  $scope.message=\"Excuting query ...\";\n\n  $scope.waiting=false;\n  $scope.filter=\"\"\n\n  // codemirror option\n  $scope.cmOption = {\n    lineNumbers: false,\n    indentWithTabs: true,\n    uiRefresh:true,\n    mode:'sparql'\n  };\n\n\n  $scope.executeQuery=function(sparql){\n    var time=Date.now();\n    $scope.executionTime=false;\n    $scope.waiting=true;\n    $scope.error=false;\n    $location.search('query',sparql)\n    $location.search('class',null)\n    $location.search('property',null)\n    $location.search('describe',null)\n    var params=angular.extend($location.search(),{output:$scope.output});\n    snorql.executeQuery(sparql, params).$promise.then(function(){\n      $scope.waiting=false;\n      $scope.executionTime=(Date.now()-time)/1000;\n    },function(reason){\n      $scope.error=reason.data\n      $scope.waiting=false\n    });\n  };\n\n  $scope.selectExample=function(elm){\n    snorql.query=snorql.examples[elm].query;\n    $scope.qSelected=elm\n    $('.row-offcanvas').removeClass('active')\n  };\n\n  $scope.reset=function(){\n    snorql.reset();\n  };\n\n\n  //\n  // load sparql examples\n  snorql.loadExamples()\n\n  //\n  // kind of queries,\n  // query, describe, class, property\n  snorql.updateQuery($location.search())\n  // $scope.executeQuery(snorql.updateQuery($location.search()));\n  $scope.$on('$locationChangeSuccess',function(url){\n    snorql.updateQuery($location.search())\n  })\n\n\n\n}]);\n\n\n/**\n * ANGULAR BOOTSTRAP\n */\napp.config([\n    '$routeProvider',\n    '$locationProvider',\n    '$httpProvider',\n    function ($routeProvider, $locationProvider, $httpProvider) {\n\n        // intercept errors\n        $httpProvider.interceptors.push('errorInterceptor')\n\n\n        // List of routes of the application\n        $routeProvider\n            .when('/', {title: 'welcome to snorql', templateUrl: 'partials/home.html'});\n\n\n        // Without serve side support html5 must be disabled.\n        $locationProvider.html5Mode(true);\n        //$locationProvider.hashPrefix = '!';\n    }\n]);\n\napp.factory('errorInterceptor', ['$q', '$rootScope', '$location',\n    function ($q, $rootScope, $location) {\n        return {\n            request: function (config) {\n                return config || $q.when(config);\n            },\n            requestError: function(request){\n                return $q.reject(request);\n            },\n            response: function (response) {\n                return response || $q.when(response);\n            },\n            responseError: function (response) {\n                if (response && response.status === 0) {\n                  $rootScope.error=\"The API is not accessible\";\n                }\n                if (response && response.status === 401) {\n                  $rootScope.error=\"You are not authorized to access the resource. Please login or review your privileges.\";\n                }\n                if (response && response.status === 404) {\n                  $rootScope.error=\"URL not found\";\n                }\n                if (response && response.status >= 500) {\n                  $rootScope.error=\"Request Failed\";\n                }\n                return $q.reject(response);\n            }\n        };\n}]);\n"]}